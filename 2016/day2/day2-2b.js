const input = [
  "UULLULLUULLLURDLDUURRDRRLDURDULLRURDUDULLLUULURURLRDRRRRULDRUULLLLUUDURDULDRRDRUDLRRLDLUDLDDRURURUURRRDDDLLRUDURDULUULLRRULLRULDUDRDRLDLURURUDDUDLURUDUDURLURURRURLUDDRURRDLUURLLRURRDUDLULULUDULDLLRRRDLRDLDUDRDDDRRUURRRRRUURRDRRDLURDRRURDLLUULULLRURDLDDDRRLLRRUURULURUUDDLRRUDDRURUUDLRLRDLRURRRDULLDLRUDDUULRDULURUURDULUDLLRRLDDLRDLRUDRLDDRLRRRDURDULLRRRDRRLUURURDRRDRRLDLUDURURLDUURDRUDRDDRLDRRLDLURURULLUURUDUUDLRLL",
  "LLLULLULDDULRLLURLLLRUUDDLRUULRLULLDLLRRDRLRLRLLDRUUURULDRDDLUDLLDUDULLLRLULLLRULDRDRUDLLRLRLLUDULRRRLDRUULDDULLDULULLUDUDLDRDURDLDLLDUDRRRDLUURRUURULLURLDURLRRLLDDUUULDRLUUDUDLURLULUDURRDRLLDDDDDRRULLRLDULULDDRUURRDLUDDDUDURDDRDRULULLLLUURDURUUUULUDLRURRULRDDRURURLLRLUUDUUURDLLDDLUDRLLLUDLLLLULRLURDRRRDUUDLLDLDDDURRDDRURUURDDRURRLDDDURDLLUURUUULRLUURRUDRLLDLURDUDRLULDLRLULULUDDLRDUDRUDLUULUULDURDRRRRLRULLUDRDDRDLDUDRDRRLDLLLLUDDLRULDLLDDUULDDRRULRRUURUDRDURLLLDDUUDRUUDLULLDR",
  "UDUUULLDDDDLUDLDULRLRDLULLDDRULDURRLURRUDLRRUDURRDUDRRRUULRLLRLUDLDRRDUURDDRDRDUUUDUDLDLLRRLUURLUUUDDDUURLULURRLURRRDRDURURUDRLRUURUDRUDDDRDRDLDRDURDLDRRDUUDLLURLDDURRRLULDRDRLLRLLLRURLDURDRLDRUURRLDLDRLDDDRLDLRLDURURLLLLDDRDUDLRULULLRDDLLUDRDRRLUUULDRLDURURDUDURLLDRRDUULDUUDLLDDRUUULRRULDDUDRDRLRULUUDUURULLDLLURLRRLDDDLLDRRDDRLDDLURRUDURULUDLLLDUDDLDLDLRUDUDRDUDDLDDLDULURDDUDRRUUURLDUURULLRLULUURLLLLDUUDURUUDUULULDRULRLRDULDLLURDLRUUUDDURLLLLDUDRLUUDUDRRURURRDRDDRULDLRLURDLLRRDRUUUURLDRURDUUDLDURUDDLRDDDDURRLRLUDRRDDURDDRLDDLLRR",
  "ULDRUDURUDULLUDUDURLDLLRRULRRULRUDLULLLDRULLDURUULDDURDUUDLRDRUDUDDLDRDLUULRRDLRUULULUUUDUUDDRDRLLULLRRDLRRLUDRLULLUUUUURRDURLLRURRULLLRLURRULRDUURRLDDRRDRLULDDRRDRLULLRDLRRURUDURULRLUDRUDLUDDDUDUDDUDLLRDLLDRURULUDRLRRULRDDDDDRLDLRRLUUDLUURRDURRDLDLDUDRLULLULRLDRDUDLRULLULLRLDDRURLLLRLDDDLLLRURDDDLLUDLDLRLUULLLRULDRRDUDLRRDDULRLLDUURLLLLLDRULDRLLLUURDURRULURLDDLRRUDULUURRLULRDRDDLULULRRURLDLRRRUDURURDURDULURULLRLDD",
  "DURLRRRDRULDLULUDULUURURRLULUDLURURDDURULLRRUUDLRURLDLRUDULDLLRRULLLLRRLRUULDLDLLRDUDLLRLULRLLUUULULRDLDLRRURLUDDRRLUUDDRRUDDRRURLRRULLDDULLLURRULUDLRRRURRULRLLLRULLRRURDRLURULLDULRLLLULLRLRLLLDRRRRDDDDDDULUUDUDULRURDRUDRLUULURDURLUÂ´RRDRRRRDRRLLLLUDLRRDURURLLULUDDLRLRLRRUURLLURLDUULLRRDURRULRULURLLLRLUURRULLLURDDDRURDUDDULLRULUUUDDRURUUDUURURRDRURDUDRLLRRULURUDLDURLDLRRRRLLUURRLULDDDUUUURUULDLDRLDUDULDRRULDRDULURRUURDU",
];

// const input = ["ULL", "RRDDD", "LURDL", "UUUUD"];

/**
 1 2 3
 4 5 6
 7 8 9
 */

// const keyboard = [
//   [1, 2, 3],
//   [4, 5, 6],
//   [7, 8, 9],
// ];

// const position = [1, 1]; // [y,x]

// const res = input
//   .map((path) => {
//     for (let i = 0; i < path.length; i++) {
//       if (path[i] === "U") {
//         position[0] = Math.max(0, position[0] - 1);
//       } else if (path[i] === "D") {
//         position[0] = Math.min(2, position[0] + 1);
//       } else if (path[i] === "L") {
//         position[1] = Math.max(0, position[1] - 1);
//       } else if (path[i] === "R") {
//         position[1] = Math.min(2, position[1] + 1);
//       }
//     }
//     return [...position];
//   })

//   .map(([y, x]) => keyboard[y][x])
//   .join("");
// console.log(res);

// const input = ["ULL", "RRDDD", "LURDL", "UUUUD"];

const keyboard2 = [
  [false, false, false, false, false, false, false],
  [false, false, false,   1,   false, false, false],
  [false, false,   2,     3,     4,   false, false],
  [false,   5,     6,     7,     8,     9  , false],
  [false, false,  "A",   "B",   "C",  false, false],
  [false, false, false,  "D",  false, false, false],
  [false, false, false, false, false, false, false],
];

const keyMaps = {
  U: [-1, 0],
  D: [1, 0],
  L: [0, -1],
  R: [0, 1]
}

const res = input
  .reduce((positions, paths) => {
    const lastPos = [...positions].pop() || [3, 1]

    const newPos = paths.split("").reduce((prevPos, path) => {
      if (!(path in keyMaps)) return prevPos
      const [row, col] = prevPos
      const [dRow, dCol] = keyMaps[path]
      const newRow = row + dRow
      const newCol = col + dCol
      return [keyboard2[newRow][newCol] ? newRow : row, keyboard2[newRow][newCol] ? newCol : col]
    }, lastPos)

    return [...positions, newPos];
  }, [])
  .map(([y, x]) => keyboard2[y][x])
  .join("");
console.log(res);
